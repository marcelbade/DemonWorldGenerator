# BUGFIX: change SQL dialect
#  http://localhost:8080/h2
#hibernate.dialect = org.hibernate.dialect.H2Dialect
#SPRING_DATASOURCE_DRIVER-CLASS-NAME=org.h2.Driver
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2
# Datasource
#spring.datasource.url=jdbc:h2:file:~/demonWorldDB
#spring.datasource.username=usr
#spring.datasource.password=usr

# no underscore, camel case instead!
# ok, i just wanna say, with all my heart: fuck you hibernate. And Fuck the documentation. Until 1 hour ago, i had no
# idea that you will automatically insert underscores into the names when you encounter camelcase
# he properties below change that !
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# turn on some SQL debugging in our properties file:
hibernate.show_sql:true
# mySQL
#
# it took you 30 minutes to solve this conundrum: for some reason, you had all the columns TWICE in your table. The reason:
# you had this value set to update. This means that every fucking time you started the program he would look for the table, see
# see that NO COLUMNS WITH UNDERSCORE NAMES (SEE ABOVE) ARE THERE and add them. There are several values for this property
#
# update
# validate
# none
#....
# however, the only one that works is validate which looks for the table, confirms that is there and does nothing.
spring.jpa.hibernate.ddl-auto=validate
# you absolutely, no exception MUST set the time zone for MySQL. The  property below does that for you!
spring.datasource.url=jdbc:mysql://localhost:3306/demonworld?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
